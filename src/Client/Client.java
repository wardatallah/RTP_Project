/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;

import javax.swing.*;
import javax.swing.Timer;

/**
 *
 * @author Eng.Orwa Nader
 */
public class Client extends javax.swing.JFrame implements ActionListener {

    Socket s;

    BufferedReader BR;
    BufferedWriter BW;
    boolean isPlay = false;
    final static int INIT = 0;
    final static int READY = 1;
    final static int PLAYING = 2;
    //this states are now in client side
    final static int FAST_PLAYING = 3;
    final static int BACK_PLAYING = 4;
    final static int FAST_BACK_PLAYING=5;
    static int state;
    static int BxFast=1;
    static int FxFast=1;
    Timer timer;
    //this timer is used to receive and store frames in a buffer from the server
    Timer timer_buf;
    byte[] buf;

    static DatagramPacket Rec_Packet;
    static DatagramSocket RTP_socket;
    static int RTP_RCV_PORT = 25000;

    InetAddress server_ip;
    int server_port;
    String video_url;

    static int SeqNb = 0;
    static int RTSPid = 0;

    ImageIcon icon;
    //where to store the frames of movie
    LinkedList<ImageIcon> frames = new LinkedList<ImageIcon>();
    //the index of the currently displayed frame (if no frame is displayed then the value 0)
    int currently_played = 0;
    //the length of the video file
    int frame_count = 0;
    String Video_length;
    //when the movie is fully downloaded this becomes true
    boolean done = false;

    /**
     * Creates new form Client
     */
    public Client() {

        initComponents();
        //little modification for decreasing the speed a bit
        timer = new Timer(25, this);
        timer.setInitialDelay(0);
        timer.setCoalesce(true);
        timer_buf = new Timer(1, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                //first receive server data
                if (frames.size() < frame_count) {
                    getData();
                    frames.add(icon);
                } else {
                    done = true;
                    timer_buf.stop();
                }
            }
        });
        timer_buf.setInitialDelay(0);
        timer_buf.setCoalesce(true);
        buf = new byte[15000];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imgIcon = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        url = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        ip = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RTSP Player");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 102, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        imgIcon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\play.png")); // NOI18N
        jButton2.setToolTipText("Play");
        jButton2.setPreferredSize(new java.awt.Dimension(100, 30));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\exit-button-md.png")); // NOI18N
        jButton4.setToolTipText("Teardown");
        jButton4.setPreferredSize(new java.awt.Dimension(100, 30));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\fastforward-32.png")); // NOI18N
        jButton5.setToolTipText("Fast-Forward");
        jButton5.setPreferredSize(new java.awt.Dimension(100, 30));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\back.png")); // NOI18N
        jButton7.setToolTipText("Backward");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\restart.png")); // NOI18N
        jButton8.setToolTipText("Replay");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\backforward.png")); // NOI18N
        jButton9.setToolTipText("Fast-Backward");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\stop.png")); // NOI18N
        jButton10.setToolTipText("Stop");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2), "Server Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 12))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(153, 153, 153));

        jButton1.setText("Setup");
        jButton1.setEnabled(false);
        jButton1.setPreferredSize(new java.awt.Dimension(100, 30));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton6.setText("OK");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        url.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
        url.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Video URL :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Server Port :");

        port.setText("2500");
        port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Server IP :");

        ip.setText("127.0.0.1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(30, 30, 30)
                                .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(url, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(url, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imgIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imgIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if (state == PLAYING || state == READY || state == BACK_PLAYING || state == FAST_PLAYING || state == FAST_BACK_PLAYING) {
            BxFast=1;
            FxFast=1;
            timer.stop();
            currently_played = 0;
            state = PLAYING;
            timer.start();
            isPlay = true;
            jButton2.setToolTipText("Pause");
            jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\pause.png"));
        

        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (state == PLAYING || state == READY || state == FAST_PLAYING || state == FAST_BACK_PLAYING) {
            BxFast=1;
            FxFast=1;
            timer.stop();
            state = BACK_PLAYING;
            timer.start();
            isPlay = true;
            jButton2.setToolTipText("Pause");
            jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\pause.png"));
        
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    
    
       
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //tearing down the connection
        jButton4ActionPerformed(null);
    }//GEN-LAST:event_formWindowClosed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        
            if (state == BACK_PLAYING || state == FAST_BACK_PLAYING) {

            timer.stop();
            state = FAST_BACK_PLAYING;
            timer.start();
            FxFast=1;
            BxFast*=2;
            isPlay = true;
            jButton2.setToolTipText("Pause");
            jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\pause.png"));
            }
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        if (state == PLAYING || state == READY || state == BACK_PLAYING || state == FAST_PLAYING || state == FAST_BACK_PLAYING) {
            BxFast=1;
            FxFast=1;
            timer.stop();
            currently_played = 0;
            state = READY;
            timer.stop();
            imgIcon.setIcon(frames.get(0));
            isPlay=false;
            jButton2.setToolTipText("Play");
            jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\play.png"));
            
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portActionPerformed

    // Setup Buttons
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
        
        SeqNb++;
        send_RTSP_request("SETUP", (String) url.getSelectedItem());

        if (parse_server_response() != 200) {
            System.out.println("Invalid Server Response");
        } else {
            //reading the last line of the message

            StringTokenizer tokens = new StringTokenizer(Video_length);
            tokens.nextToken();
            frame_count = Integer.parseInt(tokens.nextToken());
            state = READY;
            //removing frames from previous movies
            frames.clear();
            //reseting the currently displayed frame
            currently_played = 0;
            //resetting the flag to false
            done = false;
        }

    }// GEN-LAST:event_jButton1ActionPerformed

    // Play Buttons
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
        if (isPlay == false ){
            BxFast=1;
            FxFast=1;
            isPlay = true;
            jButton2.setToolTipText("Pause");
            jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\pause.png"));
        
        
        
        if (state == READY || state == PLAYING || state == FAST_PLAYING || state == BACK_PLAYING || state == FAST_BACK_PLAYING) {
            //only send request when we have not yet started
            if (frames.size() == 0) {
                SeqNb++;
                send_RTSP_request("PLAY", "");
                if (parse_server_response() != 200) {
                    System.out.println("Invalid Server Response");
                } else {
                    timer.stop();
                    state = PLAYING;
                    timer_buf.start();
                    timer.start();
                }
            } else {
                //else just simply play
                timer.stop();
                state = PLAYING;
                timer.start();
                }
            }
                }

        else{
            isPlay=false;
            jButton2.setToolTipText("Play");
            jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\play.png"));
            
            if (state == PLAYING || state == FAST_PLAYING || state == BACK_PLAYING || state == FAST_BACK_PLAYING) {

            timer.stop();
            state = READY;
            timer.stop();
        }
        }
    }// GEN-LAST:event_jButton2ActionPerformed

    // Teardown Buttons
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton4ActionPerformed
        SeqNb++;
        send_RTSP_request("TEARDOWN", "");
        if (parse_server_response() != 200) {
            System.out.println("Invalid Server Response");
        } else {
            state = INIT;
            timer.stop();
            timer_buf.stop();
            try {
                s.close();
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE,
                        null, ex);
            }
            System.exit(0);
        }
    }// GEN-LAST:event_jButton4ActionPerformed

    // Fast Forward Buttons
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton5ActionPerformed
        if (state == PLAYING || state == FAST_PLAYING ){//  || state == BACK_PLAYING ) {
            FxFast*=2;
            timer.stop();
            state = FAST_PLAYING;
            timer.start();
            isPlay = true;
            jButton2.setToolTipText("Pause");
            jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\pause.png"));
        

        }
    }// GEN-LAST:event_jButton5ActionPerformed

    // ok button
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton6ActionPerformed
        SeqNb = 0;
        String ip_1 = this.ip.getText();
        try {
            server_ip = InetAddress.getByName(ip_1);
            server_port = Integer.parseInt(this.port.getText());
            video_url = (String) this.url.getSelectedItem();

            s = new Socket(server_ip, server_port);

            BW = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
            BR = new BufferedReader(new InputStreamReader(s.getInputStream()));

            state = INIT;
            // no need to recreate the RTP socket just reuse it
            if (RTP_socket == null || RTP_socket.isClosed()) {
                RTP_socket = new DatagramSocket(RTP_RCV_PORT);
            }
            //increasing the size of income buffer due to problems about scheduling
            RTP_socket.setReceiveBufferSize(1000000000);
            RTP_socket.setSoTimeout(5);
            SeqNb = 1;
            send_RTSP_request("OK", "");

            if (parse_server_response() != 200) {
                System.out.println("Invalid Server Response");
            } else {
                state = READY;
                String names = BR.readLine();
                String urls = BR.readLine();
                String[] names_val = new String[4];
                String[] urls_val = new String[4];
                StringTokenizer token1 = new StringTokenizer(names, ",");
                StringTokenizer token2 = new StringTokenizer(urls, ",");
                int i = 0;
                ((DefaultComboBoxModel) url.getModel()).removeAllElements();
                while (token1.hasMoreElements() && token2.hasMoreElements()) {
                    names_val[i] = token1.nextToken();
                    urls_val[i] = token2.nextToken();

                    url.addItem(urls_val[i] + names_val[i]);
                    i++;
                }
                jButton1.setEnabled(true);
            }
            // receiving thumbnails
            /*for (int i = 0; i < url.getItemCount(); i++) {
                send_RTSP_request("FIRST_FRAME", url.getItemAt(i).toString());
                if (parse_server_response() != 200) {
                    System.out.println("Invalid Server Response");
                } else {
                    getData();
                    // creating the images
                    JLabel Lbl = new JLabel();
                    //resizing the first frame of the movie
                    ImageIcon ic = new ImageIcon(new BufferedImage(128, 128, BufferedImage.TYPE_3BYTE_BGR));
                    ic.getImage().getGraphics().drawImage(icon.getImage(), 0, 0, 128, 128, null);
                    Lbl.setIcon(ic);
                    Lbl.setText(url.getItemAt(i).toString());
                    // adding to the panel
                    Images.add(Lbl);

                }
            }*/
        } catch (Exception e) {
            e.printStackTrace();
        }

    }// GEN-LAST:event_jButton6ActionPerformed

    // this reads RTP packet
    private void getData() {
        // reading the packet
        Rec_Packet = new DatagramPacket(buf, buf.length);
        try {
            RTP_socket.receive(Rec_Packet);
            RTP.RTPpacket rtp_packet = new RTP.RTPpacket(Rec_Packet.getData(),
                    Rec_Packet.getLength());

            int payload_length = rtp_packet.getpayload_length();
            byte[] payload = new byte[payload_length];
            rtp_packet.getpayload(payload);

            Toolkit toolkit = Toolkit.getDefaultToolkit();
            Image image = toolkit.createImage(payload, 0, payload_length);
            icon = new ImageIcon(image);
            imgIcon.setSize(icon.getIconWidth(), icon.getIconHeight());
        } catch (Exception e) {
        }
    }

    private void urlActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_urlActionPerformed
    }// GEN-LAST:event_urlActionPerformed

    private void send_RTSP_request(String request_type, String URL) {
        try {

            BW.write(request_type + " " + URL);
            BW.newLine();
            BW.write("Cseq: " + SeqNb);
            BW.newLine();

            if (state == INIT) {
                BW.write("TRANSPORT: RTP/UDP; client_port: " + RTP_RCV_PORT);
                BW.newLine();
            } else {
                BW.write("Session: " + RTSPid);
                BW.newLine();
            }
            BW.flush();
        } catch (Exception ex) {
            System.out.println("Exception caught: " + ex);
            System.exit(0);
        }
    }

    private int parse_server_response() {
        int reply_code = 0;
        try {
            String StatusLine = BR.readLine();
            StringTokenizer tokens = new StringTokenizer(StatusLine);
            tokens.nextToken();
            reply_code = Integer.parseInt(tokens.nextToken());
            if (reply_code == 200) {
                String SeqNumLine = BR.readLine();
                String SessionLine = BR.readLine();
                tokens = new StringTokenizer(SessionLine);
                tokens.nextToken();
                RTSPid = Integer.parseInt(tokens.nextToken());
                //reading the last but not to use that line here
                Video_length = BR.readLine();
            }
        } catch (Exception ex) {
            System.out.println("Exception caught: " + ex);
            System.exit(0);
        }
        return (reply_code);
    }

    public void actionPerformed(ActionEvent e) {
        //we play when only currently_played is smaller than the size of the list by 10 or if the download is complete
        if (done || (currently_played <= frames.size() - 10)) {
            //checking the state
            if (state == FAST_PLAYING) {
                //shifting 10 frames next
                currently_played += FxFast;
            } else if (state == PLAYING) {
                //simply increase
                currently_played++;
            } else if (state == BACK_PLAYING) {
                //simply decrease
                currently_played--;
                //must not go below 1
                if (currently_played < 1) {
                    currently_played = 1;
                    isPlay=false;
                    jButton2.setToolTipText("Play");
                    jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\play.png"));
                    timer.stop();
                }
            }
            else if (state ==FAST_BACK_PLAYING){
                currently_played -= BxFast;
                //must not go below 1
                if (currently_played < 1) {
                    currently_played = 1;
                    
                    isPlay=false;
                    jButton2.setToolTipText("Play");
                    jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\play.png"));
                    timer.stop();
                }
            }
            //if done , then we must make sure that the value must not exceed the frame_count
            //else we must wait until we have enough frames
            if (currently_played > frames.size()) {
                if (done) {
                    currently_played = frame_count;
                    isPlay=false;
                    jButton2.setToolTipText("Play");
                    jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Woody\\Documents\\NetBeansProjects\\ESP_Project\\pics\\play.png"));
                    timer.stop();
                } else {
                    //must make sure of both conditions
                    while ((!done) && (currently_played > frames.size() - 10)) {
                        //this loop does nothing
                        //just prevents the exection from moving on
                    }
                }
            }
            //we use 0 as the value of no playing,meaning the  indexing starts from 1 so to get the real index must subtract 1
            imgIcon.setIcon(frames.get(currently_played - 1));
            
        }
        

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
		/*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase
         * /tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Client().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE,
                            null, ex);
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imgIcon;
    private javax.swing.JTextField ip;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField port;
    public javax.swing.JComboBox url;
    // End of variables declaration//GEN-END:variables

}
